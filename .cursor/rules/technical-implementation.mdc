---
description: 
globs: 
alwaysApply: true
---
# Technical Implementation Guide

## üé® Enhanced Dashboard Architecture

The enhanced dashboard [ui/streamlit_app_v2.py](mdc:ui/streamlit_app_v2.py) is the production-ready version with significant improvements over [ui/streamlit_app.py](mdc:ui/streamlit_app.py).

### Component Library Structure

#### Chart Components
- [ui/components/charts.py](mdc:ui/components/charts.py) - Reusable chart components
  - All charts use `@st.cache_data(ttl=300)` for 5-minute caching
  - Consistent theming with `CHART_THEME` configuration
  - Interactive Plotly visualizations with hover effects
  - Error handling with `create_empty_chart()` fallback

#### Metrics Components  
- [ui/components/metrics.py](mdc:ui/components/metrics.py) - KPI and metric displays
  - `display_metric_card()` for enhanced metric visualization
  - `display_kpi_grid()` for organized metric layouts
  - `MetricsCalculator` class for financial calculations
  - Flexible formatting (currency, percentage, number)

### Performance Optimization Patterns

#### Caching Strategy
```python
@st.cache_data(ttl=300, show_spinner=False)  # 5-minute cache for data
@st.cache_data(ttl=600, show_spinner=False)  # 10-minute cache for computations
```

#### Data Loading Pattern
```python
def load_transactions() -> Optional[pd.DataFrame]:
    try:
        transactions = pd.read_csv("output/transactions_normalized.csv", parse_dates=["timestamp"])
        # Data validation and cleaning
        return transactions
    except Exception as e:
        st.error(f"‚ùå Error loading data: {str(e)}")
        return None
```

## üí∞ Portfolio Calculations & Financial Analytics

### Core Calculation Modules

#### Portfolio Valuation Engine
- [app/valuation/portfolio.py](mdc:app/valuation/portfolio.py) - Main portfolio valuation with vectorized operations
  - `get_portfolio_value(target_date, account_ids=None)` - Get total portfolio value for specific date
  - `get_value_series(start_date, end_date, account_ids=None)` - Get portfolio value time series
  - `get_asset_values_series(start_date, end_date, account_ids=None)` - Get asset-level breakdown

#### Returns Calculation Library  
- [app/analytics/returns.py](mdc:app/analytics/returns.py) - Comprehensive returns analysis
  - `daily_returns(series)` - Calculate daily percentage returns
  - `cumulative_returns(series)` - Calculate cumulative returns
  - `twrr(series, cash_flows=None)` - Time-Weighted Rate of Return
  - `volatility(returns, annualized=True)` - Volatility calculation
  - `sharpe_ratio(returns, risk_free_rate=0.02)` - Risk-adjusted returns
  - `maximum_drawdown(series)` - Maximum drawdown analysis

#### Cost Basis Calculations
- [app/analytics/portfolio.py](mdc:app/analytics/portfolio.py) - Cost basis and tax calculations
  - `calculate_cost_basis_fifo(transactions)` - First-In-First-Out method
  - `calculate_cost_basis_avg(transactions)` - Average cost method
  - Handles multiple asset types and transaction types

## ‚ö†Ô∏è Critical Data Type Handling

### Float Conversion Pattern (CRITICAL)
**Always convert Decimal to float for pandas operations:**
```python
# ‚úÖ Correct pattern
df['value'] = df['quantity'].astype(float) * df['price'].astype(float)
daily_values = daily_values.astype(float)

# ‚ùå Avoid - causes pandas errors
df['value'] = df['quantity'] * df['price']  # If columns contain Decimal objects
```

### Stablecoin Price Handling
```python
# Handle missing price data for stablecoins
price = row.price if row.price is not None else (
    1.0 if row.symbol.upper() in ['USDC', 'USDT', 'DAI', 'BUSD', 'GUSD'] else 0.0
)
```

## üöÄ Performance Optimization

### Vectorized Operations
Use pandas vectorized operations for performance:
```python
# ‚úÖ Vectorized (fast)
portfolio_values = positions.groupby('date').apply(
    lambda x: (x['quantity'].astype(float) * x['price'].astype(float)).sum()
)

# ‚ùå Iterative (slow)
for date in dates:
    value = 0
    for _, row in positions[positions['date'] == date].iterrows():
        value += row['quantity'] * row['price']
```

### Caching Strategy
```python
@st.cache_data(ttl=600, show_spinner=False)  # 10-minute cache for heavy computations
def compute_portfolio_metrics(transactions: pd.DataFrame) -> Dict:
    # Expensive calculations here
    return metrics
```

## üîß Position Tracking Engine

### Daily Position Updates
- [app/ingestion/update_positions.py](mdc:app/ingestion/update_positions.py) - Position tracking
  - `PositionEngine` class for managing daily positions
  - `update_positions_from_transactions()` - Convert transactions to positions
  - Forward-filling logic for position continuity
  - Handles buys, sells, transfers, staking rewards

### Transaction Type Mapping
```python
POSITION_EFFECTS = {
    'buy': 'increase',
    'transfer_in': 'increase', 
    'staking_reward': 'increase',
    'sell': 'decrease',
    'transfer_out': 'decrease',
    'withdrawal': 'decrease'
}
```

## üåê API Endpoints

### REST API Structure
- [app/api/__init__.py](mdc:app/api/__init__.py) - FastAPI endpoints
  - `GET /health` - Health check
  - `GET /portfolio/value` - Portfolio value for specific date
  - `GET /portfolio/value-series` - Portfolio value time series  
  - `GET /portfolio/returns` - Comprehensive returns analysis

### Response Format
```python
{
    "target_date": "2024-01-01",
    "portfolio_value": 125000.50,
    "account_ids": [1, 2],
    "currency": "USD"
}
```

### API Usage Examples
```python
# Python client
import requests
response = requests.get("http://localhost:8000/portfolio/value", params={
    "target_date": "2024-01-01"
})
data = response.json()

# FastAPI test client
from fastapi.testclient import TestClient
from app.api import app
client = TestClient(app)
response = client.get("/portfolio/value?target_date=2024-01-01")
```

## üìä Financial Metrics Calculations

### Risk Metrics
- **Sharpe Ratio**: `(returns.mean() * 252 - risk_free_rate) / (returns.std() * sqrt(252))`
- **Maximum Drawdown**: `min((prices / rolling_max - 1) * 100)`
- **Volatility**: `returns.std() * sqrt(252) * 100` (annualized)

### Performance Metrics  
- **Total Return**: `(final_value / initial_value - 1) * 100`
- **Annualized Return**: `((final_value / initial_value) ^ (252 / days) - 1) * 100`
- **TWRR**: Time-weighted return accounting for cash flows

## üé® UI Design Patterns

### Custom CSS Styling
- Professional gradients and modern color schemes
- Responsive design for all device sizes
- Hover effects and smooth transitions
- Performance indicators and status displays

### Navigation Structure
- Radio button navigation with emoji icons
- Sidebar performance monitoring
- Quick stats display
- Contextual help and tooltips

## üìã Data Requirements

### Required Columns
The dashboard expects these columns in `output/transactions_normalized.csv`:
- `timestamp` (datetime)
- `type` (string)
- `asset` (string) 
- `amount` (float) - **Critical**: Must exist or be created from `quantity`
- `price` (float)
- `fees` (float, optional)

### Data Validation
Always validate data structure before processing:
```python
required_columns = ['timestamp', 'type', 'asset', 'amount', 'price']
missing_columns = [col for col in required_columns if col not in df.columns]
if missing_columns:
    st.error(f"‚ùå Missing required columns: {missing_columns}")
    return None
```

## üöÄ Launch Commands

### Development
```bash
# From project root with PYTHONPATH
PYTHONPATH=$(pwd) streamlit run ui/streamlit_app_v2.py --server.port 8502
```

### Production
```bash
streamlit run ui/streamlit_app_v2.py --server.port 8501 --server.address 0.0.0.0
```

### API Server
```bash
# Development
uvicorn app.api:app --reload --port 8000

# Production
uvicorn app.api:app --host 0.0.0.0 --port 8000
```

## üìà Performance Monitoring

The dashboard includes real-time performance monitoring via `PerformanceMonitor` class:
- Load time tracking
- Memory usage monitoring  
- Operation timing
- Performance ratings (üü¢ Excellent, üü° Good, üî¥ Slow)

## üß™ Testing & Benchmarking

- [scripts/simple_benchmark.py](mdc:scripts/simple_benchmark.py) - Performance benchmarking
- [scripts/demo_dashboard.py](mdc:scripts/demo_dashboard.py) - Feature demonstration
- Target: Sub-100ms load times for most operations

## ‚ö†Ô∏è Error Handling Patterns

### Graceful Degradation
```python
try:
    portfolio_ts = compute_portfolio_time_series_with_external_prices(transactions)
    if portfolio_ts.empty:
        return {'error': 'No portfolio data available'}
except Exception as e:
    logger.error(f"Portfolio calculation error: {e}")
    return {'error': f'Calculation failed: {str(e)}'}
```

### Dashboard Error Handling
```python
try:
    # Operation
    result = compute_portfolio_metrics(transactions)
    if 'error' in result:
        st.error(f"‚ùå {result['error']}")
        return
except Exception as e:
    logger.error(f"Error: {e}")
    st.error(f"‚ùå Unexpected error: {str(e)}")
```
